#include "AES.hpp"
void print_word(const word& w) {
    std::uint32_t value = 0;
    for (std::size_t i = 0; i < w.size(); ++i) {
        value = (value << 8) | w[i];
    }
    std::cout << std::hex << std::setw(8) << std::setfill('0') << value << std::endl;
}

void test_KeyExpansion(){
  std::array<byte,4*Nb> state = {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,
                                 0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c}; 
  std::array<word,Nb*(Nr+1)> expected_w = {
    word{0x2b,0x7e,0x15,0x16},
    word{0x28,0xae,0xd2,0xa6},
    word{0xab,0xf7,0x15,0x88},
    word{0x09,0xcf,0x4f,0x3c},
    word{0xa0,0xfa,0xfe,0x17},
    word{0x88,0x54,0x2c,0xb1},
    word{0x23,0xa3,0x39,0x39},
    word{0x2a,0x6c,0x76,0x05},
    word{0xf2,0xc2,0x95,0xf2},
    word{0x7a,0x96,0xb9,0x43},
    word{0x59,0x35,0x80,0x7a},
    word{0x73,0x59,0xf6,0x7f},
    word{0x3d,0x80,0x47,0x7d},
    word{0x47,0x16,0xfe,0x3e},
    word{0x1e,0x23,0x7e,0x44},
    word{0x6d,0x7a,0x88,0x3b},
    word{0xef,0x44,0xa5,0x41},
    word{0xa8,0x52,0x5b,0x7f},
    word{0xb6,0x71,0x25,0x3b},
    word{0xdb,0x0b,0xad,0x00},
    word{0xd4,0xd1,0xc6,0xf8},
    word{0x7c,0x83,0x9d,0x87},
    word{0xca,0xf2,0xb8,0xbc},
    word{0x11,0xf9,0x15,0xbc},
    word{0x6d,0x88,0xa3,0x7a},
    word{0x11,0x0b,0x3e,0xfd},
    word{0xdb,0xf9,0x86,0x41},
    word{0xca,0x00,0x93,0xfd},
    word{0x4e,0x54,0xf7,0x0e},
    word{0x5f,0x5f,0xc9,0xf3},
    word{0x84,0xa6,0x4f,0xb2},
    word{0x4e,0xa6,0xdc,0x4f},
    word{0xea,0xd2,0x73,0x21},
    word{0xb5,0x8d,0xba,0xd2},
    word{0x31,0x2b,0xf5,0x60},
    word{0x7f,0x8d,0x29,0x2f},
    word{0xac,0x77,0x66,0xf3},
    word{0x19,0xfa,0xdc,0x21},
    word{0x28,0xd1,0x29,0x41},
    word{0x57,0x5c,0x00,0x6e},
    word{0xd0,0x14,0xf9,0xa8},
    word{0xc9,0xee,0x25,0x89},
    word{0xe1,0x3f,0x0c,0xc8},
    word{0xb6,0x63,0x0c,0xa6}
  };
  std::array<word,Nb*(Nr+1)> w;
  KeyExpansion(state,w);
  assert(expected_w == w);
}
int main(int argc, char** argv){
//  char opt;
//  while ((opt = getopt(argc, argv, "m:")) != -1)
//  {
//    switch (opt) {
//      case 'm':
//        if(atoi(optarg)==128)Nr =10,mode=128,Nk=4;
//        if(atoi(optarg)==192)Nr =12,mode=192,Nk=6;
//        if(atoi(optarg)==256)Nr =14,mode=256,Nk=8;
//        break;
//      default: /* 'Error' */
//        printf("Usage: %s -m [mode]\n", argv[0]);
//        exit(1);
//        break;
//    }
//  }
//  std::cout<<Nr<<std::endl;
  test_KeyExpansion();
}
